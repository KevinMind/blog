/* c2e449f90547b904f00e647e6aacb1b02116ea24
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type IndexQueryQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type IndexQueryQuery = {
  __typename?: 'Query';
  posts: Array<{
    __typename?: 'Post';
    id: string;
  }>;
};
export declare const IndexQueryDocument: Apollo.DocumentNode;
/**
 * __useIndexQueryQuery__
 *
 * To run a query within a React component, call `useIndexQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndexQueryQuery({
 *   variables: {
 *   },
 * });
 */

export declare function useIndexQueryQuery(baseOptions?: Apollo.QueryHookOptions<IndexQueryQuery, IndexQueryQueryVariables>): Apollo.QueryResult<IndexQueryQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare function useIndexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IndexQueryQuery, IndexQueryQueryVariables>): Apollo.QueryTuple<IndexQueryQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare type IndexQueryQueryHookResult = ReturnType<typeof useIndexQueryQuery>;
export declare type IndexQueryLazyQueryHookResult = ReturnType<typeof useIndexQueryLazyQuery>;
export declare type IndexQueryQueryResult = Apollo.QueryResult<IndexQueryQuery, IndexQueryQueryVariables>;